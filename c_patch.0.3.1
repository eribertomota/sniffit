--- ./sniffit.0.3.0.c	Wed Jul 17 20:02:39 1996
+++ ./sniffit.0.3.1.c	Wed Aug 14 14:52:00 1996
@@ -1,15 +1,16 @@
 /* Sniffit -- coded by Brecht Claerhout                                   */
-/*            (we can't talk'bout programming in this case)               */
+/*            Time wasted: too much                                       */
 /* formatted code and added support for hostname resolution - Godmar Back */ 
 
-#include "config.h"
-#include "sn_defines.h"
-#include "sn_oldether.h"
-#include "sn_packets.h"
-#include "sn_data.h"
+#include "config.h"                                  /* Config header file */
+#include "sn_defines.h"                                 /* Various defines */
+#include "sn_oldether.h"                 /* Leftover from 0.0.X and 0.1.X  */
+#include "sn_packets.h"                           /* My own packet structs */
+#include "sn_data.h"                                          /* data defs */
 #ifdef INCLUDE_INTERFACE
-#include "sn_interface.h"
+#include "sn_interface.h"                            /* all ncurses stuff  */
 #endif
+#include "sn_cfgfile.h"                            /* Config file handling */
 
 static char Copyright[]= 
 	"Sniffit - Brecht Claerhout - Copyright 1996";
@@ -22,9 +23,9 @@
 #ifdef INCLUDE_INTERFACE
 " [-D tty]" 
 " (-t<Target IP> | -s<Source IP>)\n"
-"       | -i\n",
+"       | -i | -c<config file>\n",
 #else
-" (-t<Target IP> | -s<Source IP>)\n",
+" (-t<Target IP> | -s<Source IP>) | -c<config file>\n",
 #endif
 		prog_name); 
 	exit(0); 
@@ -216,6 +217,9 @@
 	struct ICMP_header icmphead;
 	struct UDP_header udphead;
 	int proto;
+	unsigned int prior; char selected; int i;    /* Wildcard stuff */
+        unsigned char *str_IP;
+	unsigned int n_s;           /* strlen short notation for wc bugfix */
 
 	proto=unwrap_packet(sp, info); 
         memcpy(&iphead,(sp+PROTO_HEAD),sizeof(struct IP_header));
@@ -228,27 +232,164 @@
 						sizeof(struct TCP_header));
 		memcpy(detail,&tcphead,sizeof(struct TCP_header));
 
-		if(WILDCARD==0)
+		if((WILDCARD==0)&&(CFG_FILE==0))     /* Selection criteria */
 		  {
-		  if (MODE == DEST && ipaddr != iphead.destination /* -t */
+		  if (MODE == DEST && ipaddr != iphead.destination   /* -t */
 			||
 	   	      MODE == SOURCE && ipaddr != iphead.source      /* -s */
 			||
-		      MODE == BOTH && ipaddr != iphead.destination /* -b */
+		      MODE == BOTH && ipaddr != iphead.destination   /* -b */
 			      && ipaddr != iphead.source
 	   	      )  return DONT_EXAMINE; /* Check destination/source IP */
 		  }
 		else
 		  {
-		  sprintf(wc_so,"%u.%u.%u.%u",so[0],so[1],so[2],so[3]);
-		  sprintf(wc_dest,"%u.%u.%u.%u",dest[0],dest[1],dest[2],dest[3]);
-		  if (MODE == DEST && (strstr(wc_dest,IP)==NULL) /* -t */
-			||
-	   	      MODE == SOURCE && (strstr(wc_so,IP)==NULL)      /* -s */
-			||
-		      MODE == BOTH && (strstr(wc_dest,IP)==NULL) /* -b */
-			      && (strstr(wc_so,IP)==NULL)
-	   	      )   return DONT_EXAMINE; /* Check destination/source IP */
+		  if (WILDCARD!=0) /* Wildcards */
+		    {   
+		    sprintf(wc_so,"%u.%u.%u.%u",so[0],so[1],so[2],so[3]);
+		    sprintf(wc_dest,"%u.%u.%u.%u",dest[0],dest[1],dest[2],dest[3]);
+		    n_s = strlen(IP);
+		    if (MODE == DEST && (strncmp(wc_dest,IP,n_s)==0) /* -t */
+	           		||
+	   	        MODE == SOURCE && (strncmp(wc_so,IP,n_s)==0) /* -s */
+		        	||
+		        MODE == BOTH && (strncmp(wc_dest,IP,n_s)==0) /* -b */
+			         && (strncmp(wc_so,IP,n_s)==0)
+	   	        )   return DONT_EXAMINE; 
+					      /* Check destination/source IP */
+		    }
+		  else 	{ /* We are using the config file (4*Check) */
+		       	prior=0; selected=0;
+		        sprintf(wc_so,"%u.%u.%u.%u",so[0],so[1],so[2],so[3]);
+		        sprintf(wc_dest,"%u.%u.%u.%u",dest[0],dest[1],dest[2],dest[3]);
+#ifdef DEBUG_ONSCREEN
+printf("CONCERNING: %s  %d - %s  %d\n",wc_so,ntohs(tcphead.source),wc_dest,ntohs(tcphead.destination));
+#endif
+                        /* Highest prior last (backward+break for speed)  */
+			for(i=(select_from_length-1);i>=0;i--)
+			  {
+			  if(prior > select_from_list[i].priority) break;
+			  str_IP = select_from_list[i].host;
+#ifdef DEBUG_ONSCREEN
+printf("SF: %s  %d   Prior:%d\n",str_IP,select_from_list[i].port,select_from_list[i].priority);
+#endif
+		          if((select_from_list[i].port==0) || 
+			     (select_from_list[i].port==ntohs(tcphead.source)))
+				{
+				if(select_from_list[i].wildcard==0)
+				  {                          /* NO wildcard */ 
+     				  if(strcmp(wc_so,str_IP)==0)
+					{selected=1; 
+		                        prior=select_from_list[i].priority;
+			                break;} 
+				  }
+				else
+				  {                            /* wildcard */
+     				  if(strncmp(wc_so,str_IP,strlen(str_IP))==0)
+				 	{selected=1; 
+		              		prior=select_from_list[i].priority;
+			      		break;} 
+				  }
+			        if(str_IP[0]==0)
+					{selected=1; break;};
+				}
+			  }
+
+			for(i=(select_to_length-1);i>=0;i--)
+			  {
+			  if(prior > select_to_list[i].priority) break;
+			  str_IP = select_to_list[i].host;
+#ifdef DEBUG_ONSCREEN
+printf("ST: %s  %d   Prior:%d\n",str_IP,select_to_list[i].port,select_to_list[i].priority);
+#endif
+		          if((select_to_list[i].port==0) || 
+			     (select_to_list[i].port==ntohs(tcphead.destination)))
+				{
+				if(select_to_list[i].wildcard==0)
+				  {                          /* NO wildcard */ 
+     				  if(strcmp(wc_dest,str_IP)==0)
+					{selected=1;
+		                        prior=select_to_list[i].priority;
+			                break;} 
+				  }
+				else
+				  {                            /* wildcard */
+     				  if(strncmp(wc_dest,str_IP,strlen(str_IP))==0)
+				 	{selected=1; 
+		              		prior=select_to_list[i].priority;
+			      		break;} 
+				  }
+			        if(str_IP[0]==0)
+					{selected=1; break;};
+			        }
+			  }
+
+			for(i=(deselect_from_length-1);i>=0;i--)
+			  {
+			  if(prior > deselect_from_list[i].priority) break;
+			  str_IP = deselect_from_list[i].host;
+#ifdef DEBUG_ONSCREEN
+printf("DF: %s  %d   Prior:%d\n",str_IP,deselect_from_list[i].port,deselect_from_list[i].priority);
+#endif
+		          if((deselect_from_list[i].port==0) || 
+			     (deselect_from_list[i].port==ntohs(tcphead.source)))
+				{
+				if(deselect_from_list[i].wildcard==0)
+				  {                          /* NO wildcard */ 
+     				  if(strcmp(wc_so,str_IP)==0)
+					{selected=0; 
+		                        prior=deselect_from_list[i].priority;
+			                break;} 
+				  }
+				else
+				  {                            /* wildcard */
+     				  if(strcmp(wc_so,str_IP)==0)
+				 	{selected=0; 
+		              		prior=deselect_from_list[i].priority;
+			      		break;} 
+				  }
+			        if(str_IP[0]==0)
+					{selected=0; break;};
+
+			        }
+			  }
+
+			for(i=(deselect_to_length-1);i>=0;i--)
+			  {
+			  if(prior > deselect_to_list[i].priority) break;
+			  str_IP = deselect_to_list[i].host;
+#ifdef DEBUG_ONSCREEN
+printf("DT: %s  %d   Prior:%d\n",str_IP,deselect_to_list[i].port,deselect_to_list[i].priority);
+#endif
+		          if((deselect_to_list[i].port==0) || 
+			     (deselect_to_list[i].port==ntohs(tcphead.destination)))
+				{
+				if(deselect_to_list[i].wildcard==0)
+				  {                          /* NO wildcard */ 
+     				  if(strncmp(wc_dest,str_IP,strlen(str_IP))==0)
+					{selected=0; 
+		                        prior=deselect_to_list[i].priority;
+			                break;} 
+				  }
+				else
+				  {                            /* wildcard */
+     				  if(strncmp(wc_dest,str_IP,strlen(str_IP))==0)
+				 	{selected=0; 
+		              		prior=deselect_to_list[i].priority;
+			      		break;} 
+				  }
+			        if(str_IP[0]==0)
+					{selected=0; break;};
+
+			        }
+			  }
+
+#ifdef DEBUG_ONSCREEN
+printf("Selected: %d\n",selected);
+#endif
+                       	if(selected==0) return DONT_EXAMINE; 
+
+			}
 		  }
 
 		if( DEST_PORT && ntohs(tcphead.destination) != DEST_PORT) 
@@ -607,7 +748,7 @@
 
 	SNIFLEN=300;                            /* Set defaults */
 	DEST_PORT=0;                            /* Dest Port */
-	SNIFMODE=DUMPMODE=PROTOCOLS=ASC=WILDCARD=0;
+	SNIFMODE=DUMPMODE=PROTOCOLS=ASC=WILDCARD=CFG_FILE=0;
 	IP=logging_device=NULL;  
 
 	if (getuid()!=0)
@@ -624,9 +765,9 @@
 #endif
 
 #ifdef INCLUDE_INTERFACE        
-	while((c=getopt(argc,argv,"D:A:P:idp:l:xabt:s:F:"))!=-1) { 
+	while((c=getopt(argc,argv,"D:A:P:idp:l:xabt:s:F:c:"))!=-1) { 
 #else
-	while((c=getopt(argc,argv,"A:P:dp:l:xabt:s:F:"))!=-1) { 
+	while((c=getopt(argc,argv,"A:P:dp:l:xabt:s:F:c:"))!=-1) { 
 #endif
                                                     /* Argument treating */
   		switch(c) {
@@ -680,6 +821,15 @@
 				strcpy(forced_dev,optarg);
                                 FORCE_DEV=1;
 				break;
+			case 'c':
+				flag++;
+				read_cfg_file(optarg); 
+#ifdef DEBUG_ONSCREEN
+				printf("FINISHED INTERPRETING\n");
+				printf("sf:%d st:%d df:%d dt:%d\n",select_from_length,select_to_length, deselect_from_length, deselect_to_length);
+#endif
+                                CFG_FILE=1;
+				break;
       			default : break;
 		}
 	}
@@ -687,7 +837,7 @@
 		quit(argv[0]);
 	if(PROTOCOLS==0) PROTOCOLS |= F_TCP;
 	if(doboth) SNIFMODE=BOTH;
-        if(SNIFMODE!=INTERACTIVE)  
+        if((SNIFMODE!=INTERACTIVE)&&(CFG_FILE==0))  
 		{
 		if(index(IP,'x'))
 		  {printf("Wildcard detected, IP nr. not checked...\n");
@@ -792,8 +942,10 @@
 		}
  	else 	{
 #endif
-		printf("Sniffit.%s is up and running.... (%s)\n\n",VERSION,
-							IP);
+		if(CFG_FILE==0)
+		  printf("Sniffit.%s is up and running.... (%s)\n\n",VERSION,IP);
+		else 
+		  printf("Sniffit.%s is up and running.... (Config File Used)\n\n",VERSION);
 		while(1)
   		  if(pcap_dispatch(dev_desc,PACKETS,packethandler,(u_char *)&ipaddr)<0)
     			printf("Capturing Packets Failed\n"), exit(0);
